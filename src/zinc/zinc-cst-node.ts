import {CstNode} from 'chevrotain'
import ZincRule from './zinc-rule'
import {IToken} from '@chevrotain/types'

export default interface ZincCstNode extends CstNode {
    // node
    [ZincRule.library_declare]?: CstNode[],
    [ZincRule.library_root]?: CstNode[],
    [ZincRule.access_scope]?: CstNode[],
    [ZincRule.function_declare]?: CstNode[],
    [ZincRule.variable_declare]?: CstNode[],
    [ZincRule.function_returns]?: CstNode[],
    [ZincRule.function_args]?: CstNode[],
    [ZincRule.function_locals]?: CstNode[],
    [ZincRule.function_call]?: CstNode[],
    [ZincRule.statement]?: CstNode[],
    [ZincRule.typedname]?: CstNode[],
    [ZincRule.expression]?: CstNode[],
    [ZincRule.if_statement]?: CstNode[],
    [ZincRule.set_statement]?: CstNode[],
    [ZincRule.call_statement]?: CstNode[],
    [ZincRule.loop_statement]?: CstNode[],
    [ZincRule.exitwhen_statement]?: CstNode[],
    [ZincRule.return_statement]?: CstNode[],
    [ZincRule.else_statement]?: CstNode[],
    [ZincRule.elseif_statement]?: CstNode[],
    [ZincRule.arrayaccess]?: CstNode[],
    [ZincRule.multiplication]?: CstNode[],
    [ZincRule.primary]?: CstNode[],
    [ZincRule.addition]?: CstNode[],
    // token
    [ZincRule.library]?: IToken[],
    [ZincRule.endfunction]?: IToken[],
    [ZincRule.globals]?: IToken[],
    [ZincRule.endglobals]?: IToken[],
    [ZincRule.identifier]?: IToken[],
    [ZincRule.type]?: IToken[],
    [ZincRule.extends]?: IToken[],
    [ZincRule.constant]?: IToken[],
    [ZincRule.public]?: IToken[],
    [ZincRule.private]?: IToken[],
    [ZincRule.takes]?: IToken[],
    [ZincRule.returns]?: IToken[],
    [ZincRule.function]?: IToken[],
    [ZincRule.comment]?: IToken[],
    [ZincRule.stringliteral]?: IToken[],
    [ZincRule.array]?: IToken[],
    [ZincRule.lparen]?: IToken[],
    [ZincRule.rparen]?: IToken[],
    [ZincRule.lcurlyparen]?: IToken[],
    [ZincRule.rcurlyparen]?: IToken[],
    [ZincRule.comma]?: IToken[],
    [ZincRule.semicolon]?: IToken[],
    [ZincRule.nothing]?: IToken[],
    [ZincRule.assign]?: IToken[],
    [ZincRule.debug]?: IToken[],
    [ZincRule.call]?: IToken[],
    [ZincRule.set]?: IToken[],
    [ZincRule.loop]?: IToken[],
    [ZincRule.endloop]?: IToken[],
    [ZincRule.exitwhen]?: IToken[],
    [ZincRule.return]?: IToken[],
    [ZincRule.if]?: IToken[],
    [ZincRule.then]?: IToken[],
    [ZincRule.else]?: IToken[],
    [ZincRule.endif]?: IToken[],
    [ZincRule.elseif]?: IToken[],
    [ZincRule.not]?: IToken[],
    [ZincRule.sub]?: IToken[],
    [ZincRule.integer]?: IToken[],
    [ZincRule.real]?: IToken[],
    [ZincRule.idliteral]?: IToken[],
    [ZincRule.add]?: IToken[],
    [ZincRule.mult]?: IToken[],
    [ZincRule.div]?: IToken[],
    [ZincRule.lsquareparen]?: IToken[],
    [ZincRule.rsquareparen]?: IToken[],
    [ZincRule.and]?: IToken[],
    [ZincRule.or]?: IToken[],
    [ZincRule.equals]?: IToken[],
    [ZincRule.notequals]?: IToken[],
    [ZincRule.lessorequal]?: IToken[],
    [ZincRule.great]?: IToken[],
    [ZincRule.greatorequal]?: IToken[],
}
