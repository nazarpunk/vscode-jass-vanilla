import {CstNode} from 'chevrotain'
import ZincRule from './zinc-rule'
import {IToken} from '@chevrotain/types'

export default interface ZincCstNode extends CstNode {
    // generic
    [ZincRule.identifier_name]?: IToken[],
    [ZincRule.identifier_type]?: IToken[],
    [ZincRule.identifier_returns]?: CstNode[],
    // node
    [ZincRule.zinc]?: CstNode[],
    [ZincRule.library_declare]?: CstNode[],
    [ZincRule.library_requires]?: CstNode[],
    [ZincRule.library_root]?: CstNode[],
    [ZincRule.library_constant]?: CstNode[],
    [ZincRule.access_scope]?: CstNode[],
    [ZincRule.function_declare]?: CstNode[],
    [ZincRule.variable_declare]?: CstNode[],
    [ZincRule.variable_set]?: CstNode[],
    [ZincRule.function_arg]?: CstNode[],
    [ZincRule.function_call]?: CstNode[],
    [ZincRule.statement]?: CstNode[],
    [ZincRule.expression]?: CstNode[],
    [ZincRule.if_statement]?: CstNode[],
    [ZincRule.set_statement]?: CstNode[],
    [ZincRule.for_statement]?: CstNode[],
    [ZincRule.return_statement]?: CstNode[],
    [ZincRule.else_statement]?: CstNode[],
    [ZincRule.while_statement]?: CstNode[],
    [ZincRule.arrayaccess]?: CstNode[],
    [ZincRule.multiplication]?: CstNode[],
    [ZincRule.primary]?: CstNode[],
    [ZincRule.primary_div]?: CstNode[],
    [ZincRule.addition]?: CstNode[],
    // token
    [ZincRule.whitespace]?: IToken[],
    [ZincRule.break]?: IToken[],
    [ZincRule.requires]?: IToken[],
    [ZincRule.optional]?: IToken[],
    [ZincRule.less]?: IToken[],
    [ZincRule.library]?: IToken[],
    [ZincRule.endfunction]?: IToken[],
    [ZincRule.globals]?: IToken[],
    [ZincRule.endglobals]?: IToken[],
    [ZincRule.identifier]?: IToken[],
    [ZincRule.type]?: IToken[],
    [ZincRule.extends]?: IToken[],
    [ZincRule.constant]?: IToken[],
    [ZincRule.public]?: IToken[],
    [ZincRule.private]?: IToken[],
    [ZincRule.returns]?: IToken[],
    [ZincRule.function]?: IToken[],
    [ZincRule.comment]?: IToken[],
    [ZincRule.comment_multiline]?: IToken[],
    [ZincRule.stringliteral]?: IToken[],
    [ZincRule.lparen]?: IToken[],
    [ZincRule.rparen]?: IToken[],
    [ZincRule.lcurlyparen]?: IToken[],
    [ZincRule.rcurlyparen]?: IToken[],
    [ZincRule.comma]?: IToken[],
    [ZincRule.semicolon]?: IToken[],
    [ZincRule.assign]?: IToken[],
    [ZincRule.debug]?: IToken[],
    [ZincRule.for]?: IToken[],
    [ZincRule.return]?: IToken[],
    [ZincRule.if]?: IToken[],
    [ZincRule.else]?: IToken[],
    [ZincRule.not]?: IToken[],
    [ZincRule.null]?: IToken[],
    [ZincRule.true]?: IToken[],
    [ZincRule.false]?: IToken[],
    [ZincRule.sub]?: IToken[],
    [ZincRule.integer]?: IToken[],
    [ZincRule.real]?: IToken[],
    [ZincRule.rawcode]?: IToken[],
    [ZincRule.add]?: IToken[],
    [ZincRule.mult]?: IToken[],
    [ZincRule.div]?: IToken[],
    [ZincRule.lsquareparen]?: IToken[],
    [ZincRule.rsquareparen]?: IToken[],
    [ZincRule.and]?: IToken[],
    [ZincRule.or]?: IToken[],
    [ZincRule.equals]?: IToken[],
    [ZincRule.notequals]?: IToken[],
    [ZincRule.lessorequal]?: IToken[],
    [ZincRule.great]?: IToken[],
    [ZincRule.greatorequal]?: IToken[],
    [ZincRule.while]?: IToken[],
}
